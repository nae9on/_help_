/*
 * complex_vector.h
 *
 *  Created on: May 26, 2019
 *      Author: akadar
 */

// [1] Stroustrup, Bjarne. A Tour of C++. Chapter 4, Addison-Wesley Professional, 2018


#ifndef COMPLEX_VECTOR_H_
#define COMPLEX_VECTOR_H_

namespace ali {

struct complex {
	double real;
	double imag;
};

class complex_vector {
public:
	complex_vector(); // default constructor
	// This is generated by the compiler by default [1]

	explicit complex_vector(size_t); // ordinary constructor with 1 argument
	// The explicit keyword prevents ali::complex_vector p0 = 5;


	explicit complex_vector(size_t, complex); // ordinary constructor with 2 args
	// The explicit keyword prevents ali::complex_vector p1 = {1, ali::complex{0,0}};

	/*
	 * When we are explicit about some defaults, other default definitions are not
	 * generated. For example making the default copy constructor explicit as done
	 * in the next line will make the default move constructor un-available. [1]
	 */
	// Making the default copy constructor explicit
	//complex_vector(const complex_vector&) = default;

	// Declaring my own copy constructor to print a message
	complex_vector(const complex_vector&);

	// Making the default copy assignment explicit
	//complex_vector& operator=(const complex_vector&) = default;

	// Declaring my own copy assignment to print a message
	complex_vector& operator=(const complex_vector&);

	void print();

	~complex_vector();
private:
	size_t n;
	complex* data;
};
}



#endif /* COMPLEX_VECTOR_H_ */
