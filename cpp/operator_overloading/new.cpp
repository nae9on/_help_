/*
 * overload_new.cpp
 *
 *  Created on: Jul 22, 2019
 *      Author: akadar
 */

#include <iostream>
#include <vector>

class basic{
public:
	void print() const{
		std::cout<<x<<" "<<y<<"\n";
	}

	// new and delete operators are generated by compiler by default.
	// However, they can be disabled using the delete keyword as follows:
	//void* operator new(size_t n) = delete;
	//void operator delete(void*) = delete;
	//void* operator new[](size_t n) = delete;
	//void operator delete[](void*) = delete;

	//NOTE: Both overloaded new and delete operator functions are static members by default.

private:
	int x{0}, y{0};
};

class advanced{
public:
	void print() const{
		std::cout<<x<<" "<<y<<"\n";
	}

	// new and delete operators are generated by compiler by default.
	// However, they can be overloaded as follows:

	// overloaded new and delete
	void* operator new(size_t n) {
		 // n specifies the number of bytes of memory to be allocated
		std::cout<<"Overloaded new called for class advanced with size "<<n<<"\n";
		void* p = ::new advanced();
		if(p==nullptr){
			throw std::bad_alloc();
		}
		return p;
	}
	void operator delete(void* p) {
		std::cout<<"Overloaded delete called for class advanced\n";
		delete[] p;
	}

	// overloaded new[] and delete[]
	// overloaded new and delete
	void* operator new[](size_t n) {
		 // n specifies the number of bytes of memory to be allocated
		std::cout<<"Overloaded new[] called for class advanced with size "<<n<<"\n";
		void* p = ::new advanced();
		if(p==nullptr){
			throw std::bad_alloc();
		}
		return p;
	}
	void operator delete[](void* p) {
		std::cout<<"Overloaded delete[] called for class advanced\n";
		delete[] p;
	}

private:
	int x{0}, y{0};
};

int main(){

	basic* b1 = new basic;
	b1->print();
	delete b1;

	std::cout<<"\n\n\n";

	basic* b2 = new basic[2];
	b2->print();
	delete[] b2;

	std::cout<<"\n\n\n";

	advanced* a1 = new advanced;
	a1->print();
	delete a1;

	std::cout<<"\n\n\n";

	advanced* a2 = new advanced[2];
	a2->print();
	(a2+1)->print();
	delete[] a2;

	return 0;
}
